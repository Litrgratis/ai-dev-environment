version: '3.8'
services:
  ollama:
    build: ./ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=24h
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_dev_environment
      POSTGRES_USER: aidev_user
      POSTGRES_PASSWORD: aidev_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  ai-dev-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ai_dev_environment
      - DB_USER=aidev_user
      - DB_PASSWORD=aidev_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - DEFAULT_AI_PROVIDER=ollama
      - FALLBACK_AI_PROVIDER=gemini
    depends_on:
      - ollama
      - postgres
      - redis
    restart: unless-stopped
    volumes:
      - ../backend:/app
      - /app/node_modules
      - ../logs:/app/logs

  ai-dev-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api
    depends_on:
      - ai-dev-backend
    restart: unless-stopped
    volumes:
      - ../frontend:/app
      - /app/node_modules

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped

volumes:
  ollama_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
